(ns javax.sound.sampled.core
  (:refer-clojure :only [require comment defn ->])
  (:import ))

(require '[javax.sound.sampled.AudioFileFormat$Type])
(require '[javax.sound.sampled.AudioFileFormat])
(require '[javax.sound.sampled.AudioFormat$Encoding])
(require '[javax.sound.sampled.AudioFormat])
(require '[javax.sound.sampled.AudioInputStream])
(require '[javax.sound.sampled.AudioPermission])
(require '[javax.sound.sampled.AudioSystem])
(require '[javax.sound.sampled.BooleanControl$Type])
(require '[javax.sound.sampled.BooleanControl])
(require '[javax.sound.sampled.Clip])
(require '[javax.sound.sampled.CompoundControl$Type])
(require '[javax.sound.sampled.CompoundControl])
(require '[javax.sound.sampled.Control$Type])
(require '[javax.sound.sampled.Control])
(require '[javax.sound.sampled.DataLine$Info])
(require '[javax.sound.sampled.DataLine])
(require '[javax.sound.sampled.EnumControl$Type])
(require '[javax.sound.sampled.EnumControl])
(require '[javax.sound.sampled.FloatControl$Type])
(require '[javax.sound.sampled.FloatControl])
(require '[javax.sound.sampled.Line$Info])
(require '[javax.sound.sampled.Line])
(require '[javax.sound.sampled.LineEvent$Type])
(require '[javax.sound.sampled.LineEvent])
(require '[javax.sound.sampled.LineListener])
(require '[javax.sound.sampled.LineUnavailableException])
(require '[javax.sound.sampled.Mixer$Info])
(require '[javax.sound.sampled.Mixer])
(require '[javax.sound.sampled.Port$Info])
(require '[javax.sound.sampled.Port])
(require '[javax.sound.sampled.ReverbType])
(require '[javax.sound.sampled.SourceDataLine])
(require '[javax.sound.sampled.TargetDataLine])
(require '[javax.sound.sampled.UnsupportedAudioFileException])
